#!/bin/sh

# Heavily based on the Slackware 14.0beta1 SlackBuild

# Written by tom ( www.slacky.eu )
# Last build from Matteo Rossini ( zerouno [at] slacky.eu )

# Slackware build script for apache-ant
# Official Site: http://ant.apache.org

# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

set -e

# Basic information. 
PKGNAME=apache-ant
VERSION=${VERSION:-1.8.4}
BUILD=${BUILD:-1}
TAG=${TAG:-mt}
ARCH=${ARCH:-x86_64}
SOURCE="http://www.apache.org/dist/ant/binaries/$PKGNAME-$VERSION-bin.tar.gz"
TAR=      # empty = auto
DIR=$PKGNAME-$VERSION      # empty = auto
DOCS="INSTALL KEYS LICENSE NOTICE README WHATSNEW"
SLACKBUILD=""

# If EULA
if [ -e EULA.TXT ];then
  more EULA.TXT
  echo "Do you accept terms? (yes/[no])"
  read ACCEPT
  if [ "$ACCEPT" != "yes" ];then
    echo; echo "SlackBuild Aborted!!"
    exit 1
  fi
fi

# Does not touch following if not needed
JOBS=${JOBS:--j2}
CWD=$(pwd)
TMP=${TMP:-/tmp/buildpkgs/$PKGNAME}
PKG=$TMP/package-$PKGNAME
OUTPUT=${OUTPUT:-$CWD}
TAR=${TAR:-$(basename $SOURCE)}
DIR=${DIR:-$(echo "$TAR"|sed -r 's/(\.tar|)(.gz|.bz2|.xz|)$//')}

if [ ! -e $CWD/$TAR ];then
  wget $SOURCE # -O "$CWD/$TAR"
fi

CHOST="i486"
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
  CHOST="x86_64"
fi

### Preparing Source
rm -rf $TMP
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
tar xvf $CWD/$TAR
cd $DIR

chown -R root:root .
chmod -R u+w,go+r-w,a-s .

# Copy the binaries into place:
ANT_HOME=/usr/lib$LIBDIRSUFFIX/ant
mkdir -p $PKG/$ANT_HOME
cp -a bin lib etc $PKG/$ANT_HOME

# Make ant jars available in the java environment:
mkdir -p $PKG/usr/share/java
for i in $PKG/$ANT_HOME/lib/*.jar ; do
  ln -sf $ANT_HOME/lib/$(basename $i) $PKG/usr/share/java/$(basename $i)
done
# Add profile scripts to set ANT_HOME in the user's environment:
mkdir -p $PKG/etc/profile.d
cat <<EOT > $PKG/etc/profile.d/ant.csh
#!/bin/csh
setenv ANT_HOME $ANT_HOME
echo \$PATH | grep -q \$ANT_HOME
if (\$status != 0) then
  setenv PATH \${PATH}:\${ANT_HOME}/bin
endif
EOT
cat <<EOT > $PKG/etc/profile.d/ant.sh
#!/bin/sh
export ANT_HOME=$ANT_HOME
if ! echo \$PATH | grep -q \$ANT_HOME ; then
  export PATH="\${PATH}:\${ANT_HOME}/bin"
fi
EOT
chmod 0755 $PKG/etc/profile.d/*


# Documentations
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cp -r \
  $DOCS \
  $PKG/usr/doc/$PKGNAME-$VERSION

cd $CWD
for SB in $PKGNAME.SlackBuild slack-desc doinst.sh doinst.sh.gz;do
  [ -e $SB ]&&cat $SB > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$SB
done

if [ -d $PKG/usr/man ]; then
    ( cd $PKG/usr/man
      find . -type f -exec gzip -9 {} \;
      for i in $( find . -type l ) ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
    )
fi

( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
[ -e $CWD/doinst.sh ] && cat $CWD/doinst.sh > $PKG/install/doinst.sh
[ -e $CWD/doinst.sh.gz ] && zcat $CWD/doinst.sh.gz > $PKG/install/doinst.sh

cd $PKG
chown -R root:root $PKG

if [ -x "$(which requiredbuilder 2>/dev/null)" ];then
  requiredbuilder -y -v -s $CWD $PKG   # add "-c -b" if you have binary files in /usr/share 
  cat $CWD/slack-required > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-required
fi

/sbin/makepkg -l y -c n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}

if [ "$1" = "--cleanup" ]; then
  rm -rf $TMP
fi
